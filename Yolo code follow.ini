Yolo code follow

debug
    1.debug하기 위해 gcc컴파일러와 동시에 gdb를 디버깅할 떄 많이 씀
    2.보통 큰 프로젝트의 경우 파일들의 include등이 많이 얽히고 하는 경우가 많아 따로 make명령어를
      통해 Makefile을 실행하는 경우가 많음.
    3.darknet의 경우도 컴파일과 빌드를 동시에하는 make 명령어를 사용하는 것으로 알고 있고
      추론 시작 시 ./darknet 실행파일의 detect 명령어를 실행하는걸로 시작
    4.Makefile을 찾아본 결과 DEBUG를 옵션을 두고 있으며 make, 즉 컴파일과 빌드를 할 떄 make -d
      의 추가적인 옵션을 주면 debugging이 되는 것으로 확인.
    실제로 돌려본 결과 아직은 debugging이 정확한지에 대한 판단은 조금 힘든 것으로 들어남.
    


Darknet.c compile - main함수 존재
    1.	#include "darknet.h"
    2. 여러 함수들 존재, average, speed, operations, oneoff ... etc
    3. int main(int argc, char **argv)
        1) 실행 ./darknet detect cfg/yolov4-tiny.cfg yolov4-tiny.weights data/dog.jpg 입력
        2) int argc는 index개수, char **argv는 detect, cfg버전, weights, image
        3) #ifdef _DEBUG (DEBUG 확인)
        4) #ifndef GPU(GPU 연산 확인)
        5) if (0 == strcmp(argv[1], "average"))
            average(argc, argv);
        6) else if (0 == strcmp(argv[1], "detect")){
            float thresh = find_float_arg(argc, argv, "-thresh", .24);
            int ext_output = find_arg(argc, argv, "-ext_output");
            char *filename = (argc > 4) ? argv[4]: 0;
            test_detector("cfg/coco.data", argv[2], argv[3], filename, thresh, 0.5, 0, ext_output, 0, NULL, 0, 0)}
            
            6-1)find_float_arg
                원형 float find_float_arg(int argc, char **argv, char *arg, float def)
                0부터 argc-1까지 argv에 "-thresh"문자가 있다면, "-thresh"뒤의 .24숫자를 반환하고
                "-thresh"와 .24를 argv에서 지워줌.
                .24를 float형 변수로 변환
            6-2)find_arg
                원형 int find_arg(int argc, char* argv[], char *arg)
                argv에 "-ext_output"문자가 있다면, 1을 반환하고 "-ext_output"를 argv에서 삭제
                없다면 0을 반환
            6-3)filename은 위의 두 함수를 지나게 됨으로 data/dog.jpg만 남게 되고 이미지의 이름을
                저장하는 변수
            
            
            
            
            6-4)test_detector
                원형 void test_detector(char *datacfg, char *cfgfile, char *weightfile, char *filename, float thresh,
                float hier_thresh, int dont_show, int ext_output, int save_labels, 
                char *outfile, int letter_box, int benchmark_layers)
                #실제 코드를 입력해본 결과(츌력해봄)
                argc = 5
                argv[0] = ./darknet
                argv[1] = detect
                argv[2] = cfg/yolov4-tiny.cfg
                argv[3] = yolov4-tiny.weights
                argv[4] = data/dog.jpg

                char *datacfg = "cfg/coco.data"
                char *cfgfile = cfg/yolov4-tiny.cfg 
                char *weightfile  = yolov4-tiny.weights
                char *filename = data/dog.jpg
                float thresh = thresh
                float hier_thresh = 0.5
                int dont_show = 0
                int ext_output = ext_output
                int save_labels = 0
                char *outfile = NULL
                int letter_box = 0
                int benchmark_layers = 0 


                1.네트워크 초기화 및 이미지 데이터에 대한 설정
                    configuration data 읽어오기
                    data class의 list 불러오기 (학습된 class)

                    list *options = read_data_cfg(datacfg);
                    char *name_list = option_find_str(options, "names", "data/names.list");
                    int names_size = 0;
                    char **names = get_labels_custom(name_list, &names_size); //get_labels(name_list);

                    image **alphabet = load_alphabet();
                    
                    network net = parse_network_cfg_custom(cfgfile, 1, 1); // set batch=1
                    #이부분이 제일 중요하다고 생각. src/parse.c에 있으며 cfgfile을 읽어 각 layer에 해당하는 part를 작은 block단위로 쪼갤 수 있음
                    fprintf(stderr, "   layer   filters  size/strd(dil)      input                output\n"); 출력
                    LAYER_TYPE lt = string_to_layer_type(s->type);
                    #yolov4-tiny의 경우 convolution, route, maxpool, yolo, upsample의 layer 구성
                    if(lt == CONVOLUTIONAL){
                        l = parse_convolutional(options, params);
                    }else if (lt == YOLO) {
                        l = parse_yolo(options, params);
                        l.keep_delta_gpu = 1;
                    }else if(lt == ROUTE){
                        l = parse_route(options, params);
                        int k;
                        for (k = 0; k < l.n; ++k) {
                            net.layers[l.input_layers[k]].use_bin_output = 0;
                            if (count >= last_stop_backward)
                                net.layers[l.input_layers[k]].keep_delta_gpu = 1;
                        }
                    }else if (lt == UPSAMPLE) {
                        l = parse_upsample(options, params, net);
                    }else if(lt == MAXPOOL){
                        l = parse_maxpool(options, params);
                    }




                    원형 convolutional_layer parse_convolutional(list *options, size_params params)
                    #





                2.image **alphabet = load_alphabet();
                  network net = parse_network_cfg_custom(cfgfile, 1, 1); // set batch=1
                  if (weightfile) {
                    load_weights(&net, weightfile);
                  }; net변수에 weight 저장.



                3.fuse_conv_batchnorm(net); #말그대로 fusion하는 함수
                    원형 void fuse_conv_batchnorm(network net) # network 구조체 안에 layer라는 구조체
                    1)  network 구조체 // 120개의 변수를 갖고 있음. n, batch .. #include/darknet.h
                    2)  network형 변수 net에는 cfg파일인 cfg/yolov4-tiny.cfg에 대한 정보가 들어가 있음.
                        cfg 파일은 batch, subdivision, training, decay, learning rate, scales등...
                        각 yolo 버전의 convolution, route, maxpool등의 순서와 parameter에 대한 정보를 담고 있음.
                    3)  cfg 파일의 각 layer들의 개수 n
                    4)  convolution과 batch normailzation 합친 함수

                4.calculate_binary_weights(net);
                    원형 void calculate_binary_weights(network net)
                    1) layer가 convultion 상태일 때 void binary_align_weights(convolutional_layer *l)함수를 호출
                        void binary_align_weights(1)
                    2)  이진 가중치를 계산하고 정렬
                    3) binarize_weights(l->weights, m, k, l->binary_weights); float 가중치를 binary로 변환 
                

                5. image im = load_image(input, 0, 0, net.c); #input image 읽어오기


                6. network_predict(net, X);
                    1)원형 float *network_predict(network net, float *input)
                    2)network_state state = {0}; #network_state 타입의 state 구조체 선언
                    3)forward_network(net, state); 
                        state.workspace = net.workspace;
                        net.n번까지 실행
                        scal_cpu(l.outputs * l.batch, 0, l.delta, 1); #backpropagation에서 진행한 parameter를 초기화
                        l.forward(l, state); #forward
                        state.input = l.output;

                    4)float *out = get_network_output(net); 
                    5)return out; out으로 forward_network를 진행히신 network를 반환

                7.draw_detections_v3(im, dets, nboxes, thresh, names, alphabet, l.classes, ext_output);
                    1)원형void draw_detections_v3(image im, detection *dets, int num, float thresh, char **names, image **alphabet, int classes, int ext_output)
                    2)detection_with_class* selected_detections = get_actual_detections(dets, num, thresh, &selected_detections_num, names);
                        get_actual_detections
                        float best_class_prob = thresh; #임계값을 받아옴
                        if (dets[i].prob[j] > best_class_prob && show)
                        result_arr[selected_num].det = dets[i];
                        result_arr[selected_num].best_class = best_class

                        return result_arr; #임계값을 넘은 class들에 해당되는 값들만을 갖고 있는 배열 반환

                8. prediction이라는 파일에 저장



                        




{


